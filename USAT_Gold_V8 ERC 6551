// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155SupplyUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract GoldAssetExchange is Initializable, ERC721URIStorageUpgradeable, ERC1155SupplyUpgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable, UUPSUpgradeable {
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant UPGRADER_ROLE = keccak256("UPGRADER_ROLE");

    struct GoldAsset {
        uint256 id;
        uint256 weight; // in milligrams
        uint purity; // in parts per thousand
        string certification;
        uint256 pricePerMilligram; // dynamic pricing
        bool isFractional;
    }

    uint256 private _nextTokenID;
    mapping(uint256 => GoldAsset) public goldAssets;

    event GoldAssetMinted(uint256 indexed tokenId, address indexed minter, uint256 weight, uint purity, string certification, bool isFractional);
    event PriceUpdated(uint256 indexed tokenId, uint256 newPricePerMilligram);

    function initialize(string memory uri) public initializer {
        __ERC721_init("USATGoldToken", "UGT");
        __ERC1155_init(uri);
        __AccessControl_init();
        __ReentrancyGuard_init();
        __Pausable_init();
        __UUPSUpgradeable_init();

        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(UPGRADER_ROLE, msg.sender);
        _setRoleAdmin(MINTER_ROLE, ADMIN_ROLE);
        _setRoleAdmin(UPGRADER_ROLE, ADMIN_ROLE);

        _nextTokenID = 1;
    }

    function mintGoldAsset(uint256 weight, uint purity, string calldata certification, uint256 pricePerMilligram, bool isFractional) public onlyRole(MINTER_ROLE) whenNotPaused returns (uint256) {
        require(purity <= 999, "Invalid purity");
        require(weight > 0, "Invalid weight");
        uint256 tokenId = _nextTokenID++;

        GoldAsset memory newAsset = GoldAsset({
            id: tokenId,
            weight: weight,
            purity: purity,
            certification: certification,
            pricePerMilligram: pricePerMilligram,
            isFractional: isFractional
        });

        goldAssets[tokenId] = newAsset;

        if (isFractional) {
            _mint(msg.sender, tokenId, weight, ""); // ERC1155 mint
        } else {
            _mint(msg.sender, tokenId); // ERC721 mint
            _setTokenURI(tokenId, certification); // Set URI for ERC721
        }

        emit GoldAssetMinted(tokenId, msg.sender, weight, purity, certification, isFractional);
        return tokenId;
    }

    function pause() public onlyRole(ADMIN_ROLE) {
        _pause();
    }

    function unpause() public onlyRole(ADMIN_ROLE) {
        _unpause();
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(UPGRADER_ROLE) {}

    // Additional functions here (e.g., buyGoldAsset, updatePrice)

    // Override functions to include pausable and other modifiers as necessary
}
